"use strict";(self.webpackChunkwebsite_template=self.webpackChunkwebsite_template||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"\u2b50Overview","href":"/ProNet/docs/Overview","docId":"Overview"},{"type":"link","label":"\ud83d\udcc1Installation","href":"/ProNet/docs/Installation","docId":"Installation"},{"type":"link","label":"\ud83d\udcd8Introduction","href":"/ProNet/docs/Introduction","docId":"Introduction"},{"type":"category","label":"\ud83d\udfe9Server","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ProNet.newSignal \ud83d\udfea","href":"/ProNet/docs/dropdown-server/newSignal","docId":"dropdown-server/newSignal"}],"href":"/ProNet/docs/category/server"},{"type":"category","label":"\ud83d\udfe6Client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ProNet.getSignal \ud83d\udfea","href":"/ProNet/docs/dropdown-client/getSignal","docId":"dropdown-client/getSignal"}],"href":"/ProNet/docs/category/client"},{"type":"category","label":"\ud83e\uddcaProNet.Signal","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Signal:fire \ud83d\udfea","href":"/ProNet/docs/dropdown-signal/fire","docId":"dropdown-signal/fire"},{"type":"link","label":"Signal:fireAll \ud83d\udfea","href":"/ProNet/docs/dropdown-signal/fireAll","docId":"dropdown-signal/fireAll"},{"type":"link","label":"Signal.Event \u26a1","href":"/ProNet/docs/dropdown-signal/event","docId":"dropdown-signal/event"}],"href":"/ProNet/docs/category/pronetsignal"},{"type":"category","label":"\ud83e\uddcaProNet.Connection","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Connection:Disconnect \ud83d\udfea","href":"/ProNet/docs/dropdown-connection/disconnect","docId":"dropdown-connection/disconnect"}],"href":"/ProNet/docs/category/pronetconnection"},{"type":"category","label":"\ud83d\udd17Enums","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SignalType \ud83d\udd17","href":"/ProNet/docs/dropdown-enums/signalType","docId":"dropdown-enums/signalType"}],"href":"/ProNet/docs/category/enums"},{"type":"link","label":"\ud83e\uddcaProNet.Options","href":"/ProNet/docs/Options","docId":"Options"}]},"docs":{"dropdown-client/getSignal":{"id":"dropdown-client/getSignal","title":"ProNet.getSignal \ud83d\udfea","description":"Gets a signal that was created on the server. Works to catch signals created at run-time as well.","sidebar":"tutorialSidebar"},"dropdown-connection/disconnect":{"id":"dropdown-connection/disconnect","title":"Connection:Disconnect \ud83d\udfea","description":"Stops listening to the given event by using the connection object.","sidebar":"tutorialSidebar"},"dropdown-enums/signalType":{"id":"dropdown-enums/signalType","title":"SignalType \ud83d\udd17","description":"Simple enum to identify the type of connection that we want to create.","sidebar":"tutorialSidebar"},"dropdown-server/newSignal":{"id":"dropdown-server/newSignal","title":"ProNet.newSignal \ud83d\udfea","description":"Creates a new signal (or gets an existing signal with the given name).","sidebar":"tutorialSidebar"},"dropdown-signal/event":{"id":"dropdown-signal/event","title":"Signal.Event \u26a1","description":"This is an event that can be attached to a signal on both the client and the server. It gets called whenever someone :fire\'s the signal associated to this signal.","sidebar":"tutorialSidebar"},"dropdown-signal/fire":{"id":"dropdown-signal/fire","title":"Signal:fire \ud83d\udfea","description":"The :fire function fires all the event listeners on the other side of the connection. If called from the client it will fire all the events attached in the server. If called from the server it will fire all the events attached on the client side. Can take an infinite amount of arguments.","sidebar":"tutorialSidebar"},"dropdown-signal/fireAll":{"id":"dropdown-signal/fireAll","title":"Signal:fireAll \ud83d\udfea","description":"Thefire function. The main difference is that it fires all the clients instead of a single client when called from the server. This function cannot be called from the \ud83d\udfe6client!","sidebar":"tutorialSidebar"},"Installation":{"id":"Installation","title":"\ud83d\udcc1Installation","description":"To download the library you can either fork it into your Rojo from the official github project or download it from here.","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"\ud83d\udcd8Introduction","description":"This library is composed by 5 different files.","sidebar":"tutorialSidebar"},"Options":{"id":"Options","title":"\ud83e\uddcaProNet.Options","description":"ProNet.Options is a container class used to represent a table that holds additional information given to a new signal.","sidebar":"tutorialSidebar"},"Overview":{"id":"Overview","title":"\u2b50Overview","description":"ProNet is a signal manager that facilitates the connections between the Client and Server in Roblox. It allows you to create connections between the client and the server without having to manually create and manage remote events/remote functions, instead you can connect the client and the server by using case-sensitive named signals.","sidebar":"tutorialSidebar"}}}')}}]);