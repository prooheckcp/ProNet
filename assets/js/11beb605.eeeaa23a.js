"use strict";(self.webpackChunkwebsite_template=self.webpackChunkwebsite_template||[]).push([[753],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),g=a,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||l;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9317:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={sidebar_position:3},c="Signal.Event \u26a1",s={unversionedId:"dropdown-signal/event",id:"dropdown-signal/event",title:"Signal.Event \u26a1",description:"This is an event that can be attached to a signal on both the client and the server. It gets called whenever someone :fire's the signal associated to this signal.",source:"@site/docs/dropdown-signal/event.md",sourceDirName:"dropdown-signal",slug:"/dropdown-signal/event",permalink:"/ProNet/docs/dropdown-signal/event",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Signal:fireAll \ud83d\udfea",permalink:"/ProNet/docs/dropdown-signal/fireAll"},next:{title:"\ud83e\uddcaProNet.Connection",permalink:"/ProNet/docs/category/pronetconnection"}},p={},u=[],d={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"signalevent-"},"Signal.Event \u26a1"),(0,l.kt)("p",null,"This is an event that can be attached to a signal on both the client and the server. It gets called whenever someone :fire's the signal associated to this signal."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"player"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Player?")),(0,l.kt)("td",{parentName:"tr",align:null},"If the event is attached in the client this argument won't exist. If attached in the server the first argument will represent the ",(0,l.kt)("inlineCode",{parentName:"td"},"Player")," that fire the signal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arguments"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Tuple")),(0,l.kt)("td",{parentName:"tr",align:null},"The arguments passed thru the network")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"connection"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#pronetconnection"},(0,l.kt)("inlineCode",{parentName:"a"},"ProNet.Connection"))),(0,l.kt)("td",{parentName:"tr",align:null},"A connection that represents the event created. Allows you to disconnect the event at any point in the future")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example:")),(0,l.kt)("p",null,"\ud83d\udfe9Server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-luau"},'--Services\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\n--Dependencies\nlocal ProNet = require(ReplicatedStorage.ProNet)\n\nlocal testSignal : ProNet.Signal = ProNet.newSignal("TestSignal", {\n    signalType = ProNet.SignalType.Event,\n    protected = false,\n    requestLimit = 5,\n    requestResetTime = 3\n})\n\ntask.wait(5)\n\ntestSignal:fireAll("Hello clients!")\n')),(0,l.kt)("p",null,"\ud83d\udfe6Client:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-luau"},'--Services\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\n--Dependencies\nlocal ProNet = require(ReplicatedStorage.ProNet)\nlocal testSignal : ProNet.Signal = ProNet.getSignal("TestSignal")\n\nlocal connection : ProNet.Connection = testSignal.Event:Connect(function(message : string)\n    print(message) -- Won\'t output anything cause the event will be disconnected before the server fires it\nend)\n\ntask.wait(2)\n\nconnection:Disconnect()\n\n')))}g.isMDXComponent=!0}}]);